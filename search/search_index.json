{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"index.html","title":"Welcome To Jersh Labs!","text":"Welcome to Jersh Labs Documentation  <p>Welcome to the JershLabs! This site is designed to provide practical guides and resources for various technical topics, including setting up development environments and tools. It's a place for you to learn, explore, and apply new skills.</p>"},{"location":"index.html#purpose","title":"Purpose","text":"<p>The goal of this site is to offer clear, step-by-step guides and templates for various tasks and technologies. Whether you're setting up Git for the first time or configuring Docker stacks, you'll find useful resources here to help you get started.</p>"},{"location":"index.html#request","title":"Request","text":"<p>If there is something on here that you would like me to cover or something that you think I would enjoy learning. Let me know by submitting a Discussion.</p>"},{"location":"ansible/setting-up-semaphore.html","title":"Deploying Ansible Semaphore","text":""},{"location":"ansible/setting-up-semaphore.html#intro","title":"Intro","text":"<p>Are you tired of manually remoting into your servers and updating them? Well today I have a treat for you. We're going to set up Ansible but with a GUI. Because everyone loves GUI's.</p>"},{"location":"ansible/setting-up-semaphore.html#setting-up-semaphore","title":"Setting up Semaphore","text":"<p>We're going to use the docker approach here. As It's quick and easy and can be easily managed and updated.</p>"},{"location":"ansible/setting-up-semaphore.html#installing-docker","title":"Installing Docker","text":"<p>You can follow the docs here to install docker.</p>"},{"location":"ansible/setting-up-semaphore.html#installing-semaphore","title":"Installing Semaphore","text":"<pre><code>---\nversion: '3'\nservices:\n  semaphore:\n    image: semaphoreui/semaphore:v2.10.22\n    container_name: semaphore\n    hostname: semaphore\n    ports:\n      - \"3000:3000\"\n    environment:\n      - SEMAPHORE_DB_DIALECT=bolt\n      - SEMAPHORE_ADMIN=admin\n      - SEMAPHORE_ADMIN_PASSWORD=changeme\n      - SEMAPHORE_ADMIN_NAME=Admin\n      - SEMAPHORE_ADMIN_EMAIL=admin@localhost\n    volumes:\n      - semaphore_data:/var/lib/semaphore\n      - semaphore_config:/etc/semaphore\n      - tmp_config:/tmp/semaphore\n    restart: unless-stopped\n\nvolumes:\n  semaphore_data:\n  semaphore_config:\n  tmp_config:\n</code></pre> <p>However you spin up docker containers. Whether it's with <code>docker-compose</code> from the cli or using portainer to set up the stack itself once that is all done you should be able to access the application at <code>IP:3000</code>.</p>"},{"location":"ansible/setting-up-semaphore.html#configuring-semaphore","title":"Configuring Semaphore","text":""},{"location":"ansible/setting-up-semaphore.html#how-ansible-works","title":"How Ansible Works.","text":"<p>At its core Ansible is agent-less, so it needs no agent, just needs a way to connect to the server. In this case we just need some Good ole SSH Keys to connect to the server. Since Semaphore uses its own SSH Server we need to don't need it on the system unless you want to do it that way.</p>"},{"location":"ansible/setting-up-semaphore.html#adding-ssh-keys","title":"Adding SSH Keys","text":"<p>This should be self-explanatory but because I like you ill go over this again.</p> <pre><code>cd .ssh\nssh-keygen -t ed25519 -C \"Semaphore\"\n</code></pre> <p>I'll explain the bits here.</p> <ul> <li><code>ssh-keygen</code>: The Command to generate the key.</li> <li><code>-t ed25519</code>: The type of key to be generated in this case ed25519.</li> <li><code>-C \"GitHub\"</code> This is a comment to be added to be the key, It is optional but helps me with what the keys are besides the name.</li> </ul> <p>Once the key is created and named all you need to do is add it to semaphore.</p> <p>That can be done by following these steps.</p> <p><code>Key Store --&gt; New Key --&gt; SSH Key from dropdown.</code></p> <p>Name the key and paste the private key in the Dialog Box.</p> <p>After that make sure the public key is in the <code>Authorized_keys</code> file on the target machine.</p>"},{"location":"ansible/setting-up-semaphore.html#building-an-inventory","title":"Building an Inventory","text":"<p>We can test this by using a playbook. But first we need to built on an inventory.</p> <p>For us to be able to do that follow the steps below.</p> <p>`Inventory --&gt; NEW INVENTORY --&gt; Select Ansible --&gt; Select Static</p> <p><pre><code>[linux servers]\n172.18.8.40\n</code></pre> File should look something like that.</p> <p>Once that is done we're close to be being able to test. We just need a playbook.</p>"},{"location":"ansible/setting-up-semaphore.html#configuring-repo-for-task-templates","title":"Configuring Repo for Task Templates.","text":"<p>Before we get to adding the Task we need a repo to test it on.</p> <p>Let's use this repo here</p> <p>Ansible's own test playbooks.</p> <p>To add it follow these steps.</p> <ul> <li>Click Repositories</li> <li>Click NEW REPOSITORY</li> <li>Name it</li> <li>https://github.com/ansible/test-playbooks.git (add that as URL)</li> <li>Branch is main</li> <li>No key is required as this it <code>HTTPS</code> so selected none you may need to create a non key in the key store which is easy</li> </ul> <p>Adding None Key if needed</p> <ul> <li>Click Key Store</li> <li>Click New Key</li> <li>Select None from drop down.</li> <li>Name it none. (You're done)</li> </ul>"},{"location":"ansible/setting-up-semaphore.html#adding-task-template","title":"Adding Task Template","text":"<p>Almost Done Here folks, now we add the Task.</p> <ul> <li>Click Task Templates on Side bar</li> <li>Click NEW TEMPLATE</li> <li>Select Ansible playbook</li> <li>Name it ping</li> <li>Description is not needed</li> <li>File name is going to be <code>ping.yml</code></li> <li>Inventory is the one you created</li> <li>repo is the one we just created as well</li> <li>env needs to be set that. ( go ahead and make an empty one if not already.)</li> </ul> <p>After that is all done you should be good to test the playbook if all the keys were added correctly. The playbook should be finished with a Success and a green okay in the window.</p>"},{"location":"ansible/setting-up-semaphore.html#epilogue","title":"Epilogue","text":"<p>Well that is all for today folks, We set up Ansible semaphore and tested a playbook to verify all is working good. If you have any questions or something is not clear feel free to open an Issue.</p>"},{"location":"git/setting-up-git.html","title":"Time 2 Git Gud","text":"Time to Git Gud"},{"location":"git/setting-up-git.html#intro","title":"Intro","text":"<p>Hello Ladies and Germs, To my class on how to <code>Git Gud</code>. I'll be showing you how to install git on your machines and also adding ssh keys and stuff.</p>"},{"location":"git/setting-up-git.html#installing-git","title":"Installing Git","text":"<p>Installing Git is easy I'll be showing you how to on Windows and Ubuntu here.</p> <ul> <li> <p>Windows <pre><code>winget install git.git\n</code></pre></p> </li> <li> <p>Ubuntu</p> </li> </ul> <p><pre><code>sudo apt install git\n</code></pre> </p> <p>As I said it is dead simple. The next step is configuring.</p>"},{"location":"git/setting-up-git.html#configuring-git","title":"Configuring Git","text":"<p>This part can be weird at times but luckily for you, I have scripted this part.</p> <ul> <li>Windows <pre><code>Invoke-WebRequest -Uri \"https://raw.githubusercontent.com/JershBytes/jershlabs-docs/refs/heads/main/Git/scripts/git-config.ps1\" -OutFile \"git-config.ps1\"\n</code></pre></li> <li>Linux (curl is os agnostic) <pre><code>curl -o git-config.sh \"https://raw.githubusercontent.com/JershBytes/jershlabs-docs/refs/heads/main/Git/scripts/git-config.sh\"\n</code></pre></li> </ul> <p>Once you have the files down for the system you're running just run the scipt by doing a</p> <ul> <li><code>./git-config.ps1</code></li> </ul> <p>or</p> <ul> <li><code>./git-config.sh</code></li> </ul> <p>This will ask for the email and username you want to use on commits for GitHub. Along with settings I think are the best for using git.</p>"},{"location":"git/setting-up-git.html#adding-ssh-keys","title":"Adding SSH Keys","text":"<p>SSH Keys are a key part of using Git in my opinion. Make it easier to clone and some Sites like GitHub** do not allow pushing via HTTPS.</p> <p>Lucky for us creating an SSH key is the same on every platform. Below I'll show you how this is done.</p> <pre><code>cd .ssh\nssh-keygen -t ed25519 -C \"GitHub\"\n</code></pre> <p>I'll explain the bits here.</p> <ul> <li><code>ssh-keygen</code>: The Command to generate the key.</li> <li><code>-t ed25519</code>: The type of key to be generated in this case ed25519.</li> <li><code>-C \"GitHub\"</code> This is a comment to be added to be the key, It is optional but helps me with what the keys are besides the name.</li> </ul> <p>After that command is run it will ask what you want the name of the file to be. In this case, just type GitHub to make it easier. After that key is generated we need to add something to the ssh config but also add this key to GitHub.</p> <p><pre><code>Host github.com\n        HostName github.com\n        User git\n        IdentityFile ~/.ssh/keys/github/GitHub\n        IdentitiesOnly=yes\n</code></pre> This will make it so when you're doing git commits with SSH that it only uses that key and ignores the rest of the SSH config. I suggest this go at the top of the config.</p> <p>Once that is done follow this Guide to add the key to your account. After that, we can test it with this command.</p> <pre><code>ssh -T git@github.com\n</code></pre> <p>Hi coloredbytes! You've successfully authenticated, but GitHub does not provide shell access.</p> <p>If configured correctly you should get some output like this. If so congrats git is configured and we can start doing some fun stuff.</p>"},{"location":"linux/mounting-drives.html","title":"Mounting Remote Drives","text":""},{"location":"linux/mounting-drives.html#intro","title":"Intro","text":"<p>Hello Folks, Today We're going to learn one of the cool things in Linux and that is mounting an external Network share.</p>"},{"location":"linux/mounting-drives.html#setting-up-the-share","title":"Setting up the Share","text":"<p>Provided you have the share already. I'll be showing here how to mount the share.</p>"},{"location":"linux/mounting-drives.html#cli","title":"CLI","text":"<p>First, you'll want to make sure you have NFS Client installed.</p> <ul> <li>Debian/Ubuntu:</li> </ul> <pre><code>sudo apt update\nsudo apt install nfs-common\n</code></pre> <ul> <li>CentOS/RHEL:</li> </ul> <pre><code>sudo yum install nfs-utils\n</code></pre> <p>Once that is done we'll need to make a Mount Point for this.</p> <ul> <li>That can be done like this</li> </ul> <p><pre><code>sudo mkdir -p /mnt/nfs_share\n</code></pre> - Once the Mount Point is made. We can mount it</p> <p><pre><code>sudo mount -t nfs nfs_server_ip:/path/to/nfs_share /mnt/nfs_share\n</code></pre> I'll break down these commands for you here.</p> <ul> <li><code>mount -t nfs</code> - Issues the mount command with the type of <code>nfs</code>.</li> <li><code>nfs_server_ip</code> - The IP of the server.</li> <li><code>/path/to/nfs_share</code> - Path on the target server.</li> <li><code>/mnt/nfs_share</code> - Where the Share will be mounted on the server.</li> </ul> <p>Once that is done we can test to make sure the share is mounted correctly by running a</p> <p><pre><code>df -h | grep nfs\n</code></pre> If all looks good then we have mounted the share at least for this session. But we want this to happen on every boot. That can be done by adding a simple line to the <code>/etc/fstab</code>.</p> <pre><code>echo \"192.168.1.100:/export/shared /mnt/nfs_share nfs defaults 0 0\" | sudo tee -a /etc/fstab\n</code></pre> <p>Running that snippet will add it to that file but please change the variables as most likely you're mount is not the exact same as the example.</p> <p>After that is done go ahead and run a <code>tail /etc/fstab</code> to make sure the line has been added to the file. If you see the line you added you're all set then just issue a <code>mount -a</code> and you'll be all set. If you have any lines that you don't want re mounted make sure they are commented out or just run <code>sudo mount /mnt/nfs_share</code> to mount that specific entry.</p> <p>After that is all done the mount should stay persistent even after reboots.</p>"},{"location":"linux/mounting-drives.html#cockpit","title":"Cockpit","text":"<p>I've shared this video here found on YouTube to better show how it'd done. While it is old the only difference is instead of the <code>+</code> in storage there is a hamburger menu instead. Epilogue With all that being said, this is how you can mount shares in Linux. I hope you learned something here, and make sure to come back for more tutorials.</p>"},{"location":"linux/setting-up-wsl.html","title":"Setting Up WSL","text":""},{"location":"linux/setting-up-wsl.html#install-wsl-and-its-dependencies","title":"Install WSL and its Dependencies.","text":"<p><pre><code>wsl --install --no-distribution\n</code></pre> - This is the only step for Installing WSL and its dependencies.</p>"},{"location":"linux/setting-up-wsl.html#windows-configuration","title":"Windows Configuration","text":""},{"location":"linux/setting-up-wsl.html#set-wsl-2-as-your-default-version","title":"Set WSL 2 as your default version","text":"<pre><code>wsl --set-default-version 2\n</code></pre> <p>Note</p> <p>You may need to download the WSL2 Kernel update. This can be found here. Afer that is installed just run the command above and then follow the guide from there.</p>"},{"location":"linux/setting-up-wsl.html#create-wslconfig-file","title":"Create .wslconfig file","text":"<p>The next step is to create a <code>.wslconfig</code> file so you can add more control over WSL.</p> <ul> <li>In a <code>Powershell</code> shell. Copy That and boom you should be good.</li> </ul> <pre><code>@\"\n[wsl2]\nmemory = 4G\n\n[experimental]\nautoMemoryReclaim = gradual\nsparseVhd = true\n\"@ | Out-File -FilePath \"$env:USERPROFILE\\.wslconfig\" -Encoding utf8\n</code></pre> <p>This gets posted on your Windows PC. Below I'll break down what they do.</p> <ul> <li>autoMemoryReclaim</li> <li>This setting is used to control the automatic reclamation of memory from WSL instances.</li> <li><code>gradual</code>: Specifies that memory should be reclaimed gradually, which helps in preventing performance issues due to sudden memory reclamation.</li> <li>sparseVhd</li> <li>This setting controls whether the virtual hard disks (VHDs) used by WSL instances are created as sparse files.</li> <li><code>true</code>: Specifies that the VHD should be created as a sparse file.</li> </ul>"},{"location":"linux/setting-up-wsl.html#installing-ubuntu-2404","title":"Installing Ubuntu 24.04.","text":"<ul> <li>In a Powershell Shell, we will need to copy that command to install Ubuntu 24.04.</li> </ul> <p><pre><code>wsl --install -d Ubuntu-24.04\n</code></pre> <pre><code>user: devops\npass: somdevops\n</code></pre></p> <p>User and Pass do not need to be that this is just an example of when it asks you.</p>"},{"location":"linux/setting-up-wsl.html#configuration-of-ubuntu","title":"Configuration of Ubuntu","text":"<p>After You're dropped into Ubuntu. We're going to do some tweaks to the Quality of life and make WSL a little more fun.</p> <p>These next steps should be performed as root. That can be achieved by using the command below.</p> <pre><code>sudo -i\n</code></pre>"},{"location":"linux/setting-up-wsl.html#update-script","title":"Update Script","text":"<ul> <li>Go ahead and copy this into the terminal.</li> </ul> <p><pre><code>touch /usr/local/bin/update &amp;&amp; chmod +x /usr/local/bin/update\ncat &lt;&lt;EOF &gt;/usr/local/bin/update\nsudo apt update\nsudo apt upgrade\nEOF\n</code></pre> What this does is drops that little upgrade script into <code>/usr/local/bin</code> which is specifically used to store executable files (binaries) that are intended to be accessible by all users on the system but are not part of the core operating system. This Specific script just does a system update with one command instead of two.</p>"},{"location":"linux/setting-up-wsl.html#wsl-config-file","title":"WSL config file","text":"<pre><code>touch /etc/wsl.conf\ncat &lt;&lt;EOF &gt;/etc/wsl.conf\n[boot]\nsystemd=true\n[automount]\nroot = /\noptions = \"metadata,dmask=022,fmask=033\"\n[user]\ndefault=devops\nEOF\n</code></pre> <p>This config file just setups wsl to act more like a native Linux system. But Also specifies the default user.</p>"},{"location":"linux/setting-up-wsl.html#epilogue","title":"Epilogue","text":"<p>Well, Ladies and Gents. This is the end. In this post, we Installed WSL and its dependencies. Installed Ubuntu and made some tweaks. You now have a work Linux env inside Windows and you can do a whole lot with it. So go out there and have some fun.</p>"},{"location":"terraform/setting-up-terraform.html","title":"Github As Code","text":""},{"location":"terraform/setting-up-terraform.html#installing-terraform","title":"Installing Terraform","text":""},{"location":"terraform/setting-up-terraform.html#windows","title":"Windows","text":"<pre><code>winget install Hashicorp.Terraform\n</code></pre>"},{"location":"terraform/setting-up-terraform.html#macosxlinux","title":"MacOSX/Linux","text":"<pre><code>brew tap hashicorp/tap\nbrew install hashicorp/tap/terraform\n</code></pre>"},{"location":"terraform/setting-up-terraform.html#ubuntudebian","title":"Ubuntu/Debian","text":"<pre><code>wget -O- https://apt.releases.hashicorp.com/gpg | sudo gpg --dearmor -o /usr/share/keyrings/hashicorp-archive-keyring.gpg\necho \"deb [signed-by=/usr/share/keyrings/hashicorp-archive-keyring.gpg] https://apt.releases.hashicorp.com $(lsb_release -cs) main\" | sudo tee /etc/apt/sources.list.d/hashicorp.list\nsudo apt update &amp;&amp; sudo apt install terraform\n</code></pre>"},{"location":"terraform/setting-up-terraform.html#centosrhel","title":"CentOS/RHEL","text":"<pre><code>sudo yum install -y yum-utils\nsudo yum-config-manager --add-repo https://rpm.releases.hashicorp.com/RHEL/hashicorp.repo\nsudo yum -y install terraform\n</code></pre>"},{"location":"terraform/setting-up-terraform.html#setting-up-your-workspace","title":"Setting up your workspace.","text":"<p>I like to create a <code>terraform</code> folder in my home directory or somewhere where I'll remember.</p> <ul> <li>Following the commands below I'll first show you how to do this on <code>Linux</code> and then <code>Windows</code>.</li> </ul>"},{"location":"terraform/setting-up-terraform.html#linux","title":"Linux","text":"<pre><code>cd ~\nmkdir terraform;cd terraform\ntouch {provider,main,variables}.tf\n</code></pre>"},{"location":"terraform/setting-up-terraform.html#windows_1","title":"Windows","text":"<pre><code>cd ~\nmkdir terraform;cd terraform\n\n# Next Part is a for loop to create the files from above put on windows.\n\nforeach ($name in \"provider.tf\", \"main.tf\", \"variables.tf\") {\n    New-Item -Path . -Name $name -ItemType \"file\"\n}\n</code></pre>"},{"location":"terraform/setting-up-terraform.html#utilizing-terraform","title":"Utilizing Terraform","text":"<p>Now, That we have all that setup we need a project. I Use Proxmxox in my lab put some of my friends use Hyper-V. So Let's try Making a GitHub Reepo.</p>"},{"location":"terraform/setting-up-terraform.html#the-providertf-file","title":"The <code>provider.tf</code> file","text":"<ul> <li>In your Text Editor of choice open the <code>provider.tf</code> file and add this bit to it.</li> </ul> <pre><code>terraform {\n  required_providers {\n    github = {\n      source  = \"integrations/github\"\n      version = \"~&gt; 6.0\"\n    }\n  }\n}\n\n# Configure the GitHub Provider\nprovider \"github\" {\n      token = var.token # or `GITHUB_TOKEN`\n}\n</code></pre>"},{"location":"terraform/setting-up-terraform.html#the-maintf-file","title":"The <code>main.tf</code> file","text":"<ul> <li>In your Text Editor of choice open the <code>main.tf</code> file and add this bit to it.</li> </ul> <pre><code>resource \"github_repository\" \"repo\" {\n  name        = var.repo_name\n  description = \"My awesome codebase\"\n\n  visibility = \"public\"\n}\n</code></pre>"},{"location":"terraform/setting-up-terraform.html#the-variablestf-file","title":"The <code>variables.tf</code> file","text":"<ul> <li>In your Text Editor of choice open the <code>variables.tf</code> file and add this bit to it.</li> </ul> <pre><code>variable \"token\" {\n    type = string\n    description = \"GitHub PAT Token\"\n}\n\nvariable \"repo_name\" {\n    type = string\n    description = \"Name of the repo\"\n}\n</code></pre> <p>Now that we have most of that setup. We're almost ready to try this bad-boi out.</p> <p>The best way to separate this is instead of putting the variables in plain text in case you make this a git repo. is make yet another file .</p>"},{"location":"terraform/setting-up-terraform.html#the-terraformtfvars-file","title":"The <code>terraform.tfvars</code> file","text":"<ul> <li>In your Text Editor of choice open the <code>terraform.tfvars</code> file and add this bit to it.</li> </ul> <pre><code>repo_name = \"value\"\ntoken = \"value\"\n</code></pre> <p>With that being done it's not in plain text and if you decided to version control your terraform. You can just add a <code>.gitignore</code> file to ignore that from being pushed.</p>"},{"location":"terraform/setting-up-terraform.html#testing-your-work","title":"Testing Your Work","text":"<p>We're almost done here we just need to do some things before the magic happens.</p> <ul> <li>Run these three commands in your shell.</li> </ul> <p><pre><code>terraform init\nterraform plan\nterraform apply\n</code></pre> Here is a breakdown of these commands. - <code>terraform init</code> - Initializes the Provider. - <code>terraform plan</code> - Buts the plan or the files into staging. - <code>terraform apply</code> - Applys the work, In this case creating the repo.</p> <p>After this is all done check your GitHub to see if the new repo is there. If it's there congrats you did it right. If not I have failed you as a teacher.</p> <p>sad capybara noises</p>"},{"location":"terraform/setting-up-terraform.html#epilogue","title":"Epilogue","text":"<p>With all this being said I hope you had fun doing this. I know it was something cool for me to learn. Till next time ladies and gents.</p> <ul> <li>If you don't have a PAT token for github and don't know how to set it up. Check out the video here .</li> </ul>"}]}